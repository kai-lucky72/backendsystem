// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807140230_FixAttendanceTimeframeDayOfWeekType")]
    partial class FixAttendanceTimeframeDayOfWeekType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Agent", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("AgentType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("agent_type");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ManagerId");

                    b.ToTable("agents", (string)null);
                });

            modelBuilder.Entity("backend.Models.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint")
                        .HasColumnName("agent_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("backend.Models.AttendanceTimeframe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AppliesToAllAgents")
                        .HasColumnType("bit")
                        .HasColumnName("applies_to_all_agents");

                    b.Property<int>("BreakDuration")
                        .HasColumnType("int")
                        .HasColumnName("break_duration");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<short>("DayOfWeek")
                        .HasColumnType("smallint")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("attendance_timeframes", (string)null);
                });

            modelBuilder.Entity("backend.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entity_type");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("audit_log", (string)null);
                });

            modelBuilder.Entity("backend.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint")
                        .HasColumnName("agent_id");

                    b.Property<DateTime?>("CollectedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("collected_at");

                    b.Property<string>("CollectedByName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("collected_by_name");

                    b.Property<int>("ContractYears")
                        .HasColumnType("int")
                        .HasColumnName("contract_years");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("insurance_type");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("national_id");

                    b.Property<decimal>("PayingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("paying_method");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("backend.Models.ClientsCollected", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("collected_at");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("clients_collected", (string)null);
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long?>("LeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("leader_id");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("ManagerId");

                    b.ToTable("agent_groups", (string)null);
                });

            modelBuilder.Entity("backend.Models.Manager", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("department");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedById");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit")
                        .HasColumnName("read_status");

                    b.Property<long?>("RecipientId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipient_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ViaEmail")
                        .HasColumnType("bit")
                        .HasColumnName("via_email");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("national_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("WorkId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[national_id] IS NOT NULL");

                    b.HasIndex("WorkId")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("backend.Models.Agent", b =>
                {
                    b.HasOne("backend.Models.Group", "Group")
                        .WithMany("Agents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("backend.Models.Manager", "Manager")
                        .WithMany("Agents")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithOne("Agent")
                        .HasForeignKey("backend.Models.Agent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Attendance", b =>
                {
                    b.HasOne("backend.Models.Agent", "Agent")
                        .WithMany("Attendances")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("backend.Models.AttendanceTimeframe", b =>
                {
                    b.HasOne("backend.Models.Manager", "Manager")
                        .WithMany("AttendanceTimeframes")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("backend.Models.AuditLog", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Client", b =>
                {
                    b.HasOne("backend.Models.Agent", "Agent")
                        .WithMany("Clients")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("backend.Models.ClientsCollected", b =>
                {
                    b.HasOne("backend.Models.Agent", "Agent")
                        .WithMany("ClientsCollectedRecords")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.HasOne("backend.Models.Agent", "Leader")
                        .WithMany("LedGroups")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("backend.Models.Manager", "Manager")
                        .WithMany("Groups")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("backend.Models.Manager", b =>
                {
                    b.HasOne("backend.Models.User", "CreatedBy")
                        .WithMany("CreatedManagers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("backend.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Notification", b =>
                {
                    b.HasOne("backend.Models.User", "Recipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("backend.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("backend.Models.Agent", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Clients");

                    b.Navigation("ClientsCollectedRecords");

                    b.Navigation("LedGroups");
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("backend.Models.Manager", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("AttendanceTimeframes");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedManagers");

                    b.Navigation("Manager");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
